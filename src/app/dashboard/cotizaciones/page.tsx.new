import Link from 'next/link';
import { Quote } from '@/core/domain/quote/Quote';
import { FiltersBar } from "@/features/quotes/ui/FiltersBar";
import { NewQuoteButton } from "@/features/quotes/ui/NewQuoteButton";

// Mock de datos (en producción, esto vendría de una base de datos real)
const quotesDB: Quote[] = [
  {
    id: 'COT-001',
    client: 'Constructora XYZ',
    date: '2023-08-15',
    status: 'pending',
    amount: 1250000
  },
  {
    id: 'COT-002',
    client: 'Inmobiliaria ABC',
    date: '2023-08-20',
    status: 'approved',
    amount: 785000
  }
];

// Función para obtener todas las cotizaciones (con posibles filtros)
async function getQuotes(filters?: any): Promise<Quote[]> {
  // En producción, esta sería una consulta a la base de datos con filtros aplicados
  // Por ahora, simplemente devolvemos todos los datos de prueba
  return quotesDB;
}

// Función para exportar cotizaciones a CSV
async function exportQuotesToCSV() {
  'use server';
  
  // Lógica para generar un CSV con las cotizaciones
  // En producción, esta función generaría un archivo y lo enviaría al cliente
  
  // Simulación del proceso de exportación
  console.log('Exportando cotizaciones a CSV...');
  
  return { success: true, message: 'Cotizaciones exportadas exitosamente' };
}

export default async function CotizacionesPage({ searchParams }: { searchParams?: { [key: string]: string } }) {
  // Extraer filtros de los parámetros de búsqueda
  const filters = searchParams ? {
    client: searchParams.client,
    status: searchParams.status,
    dateFrom: searchParams.dateFrom,
    dateTo: searchParams.dateTo
  } : undefined;
  
  // Obtener cotizaciones con filtros aplicados
  const quotes = await getQuotes(filters);
  
  return (
    <div className="space-y-3 sm:space-y-4 lg:space-y-6 animate-fadeIn">
      {/* Acciones de sección */}
      <div className="flex items-start justify-end gap-2 sm:gap-3">
        <form action={exportQuotesToCSV}>
          <button type="submit" className="btn-secondary text-xs sm:text-sm">Exportar</button>
        </form>
        <NewQuoteButton />
      </div>
      
      {/* Barra de filtros */}
      <FiltersBar />
      
      {/* Tabla de cotizaciones */}
      <div className="overflow-x-auto rounded-lg shadow">
        <table className="w-full bg-white">
          <thead className="bg-gray-50 text-xs text-gray-500">
            <tr>
              <th className="py-3 px-4 text-left">ID</th>
              <th className="py-3 px-4 text-left">Cliente</th>
              <th className="py-3 px-4 text-left">Fecha</th>
              <th className="py-3 px-4 text-left">Estado</th>
              <th className="py-3 px-4 text-right">Monto</th>
              <th className="py-3 px-4 text-center">Acciones</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {quotes.map((quote) => (
              <tr key={quote.id} className="hover:bg-gray-50">
                <td className="py-3 px-4 text-sm">
                  <Link href={`/dashboard/cotizaciones/${quote.id}`} className="text-blue-600 hover:underline">
                    {quote.id}
                  </Link>
                </td>
                <td className="py-3 px-4 text-sm">{quote.client}</td>
                <td className="py-3 px-4 text-sm">{quote.date}</td>
                <td className="py-3 px-4">
                  <span 
                    className={`px-2 py-1 rounded-full text-xs ${
                      quote.status === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                      quote.status === 'approved' ? 'bg-green-100 text-green-800' : 
                      'bg-red-100 text-red-800'
                    }`}
                  >
                    {quote.status === 'pending' ? 'Pendiente' : 
                     quote.status === 'approved' ? 'Aprobada' : 'Rechazada'}
                  </span>
                </td>
                <td className="py-3 px-4 text-sm text-right">${quote.amount.toLocaleString()}</td>
                <td className="py-3 px-4 text-center">
                  <div className="flex justify-center space-x-2">
                    <Link href={`/dashboard/cotizaciones/${quote.id}`} className="text-blue-600 hover:text-blue-800">
                      Ver
                    </Link>
                  </div>
                </td>
              </tr>
            ))}
            
            {quotes.length === 0 && (
              <tr>
                <td colSpan={6} className="py-4 text-center text-gray-500">
                  No se encontraron cotizaciones
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
